# GitLab Workflow for building and deploying a Hugo site to GitHub Pages
# needs $MRX_DOCKER_USR - the account username for docker hub
# needs $MRX_DOCKER_PWD - the account password for docker hub
# needs $MRX_DOCKER_NS - the account namespace for docker hub e.g. metarexmedia
variables:
  vGOLANG: "1.22"
  vHUGO: "0.133.0"
  BASE_URL: ""
  vDART: "1.77.8"
  # node version `node` will install the latest version with nvm
  vNODE: node
  vDOCKER_IMAGE: "27"
  REGISTRY: hub.docker.com
  GIT_DEPTH: 0
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  TZ: Europe/London
  barkId: "GitLab:"
  # docker will fail to login unless the certdir is specified
  DOCKER_TLS_CERTDIR: "/certs"

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "rc"

stages:
  - test
  - build
  - deploy
  # - hook

default:
  image: golang:latest

# --- bark --------------------------------------------------------------------
bark:
  stage: build
  script:
    - curl https://mrmxf.com/get/clog | bash
    - clog Check
    - clog Check gitlab-core-env
    - clog Check gl-env

# --- hugo --------------------------------------------------------------------
hugo:
  stage: build
  needs: [bark]
  script:
    - curl https://mrmxf.com/get/clog | bash
    - apt-get update && apt-get install -y brotli
    # nvm (Node management) - config is written to  ~/.bashrc
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    - source ~/.bashrc
    # Node & DART SASS
    - nvm install $vNODE
    - curl --output /tmp/dart.tar.gz -LJ https://github.com/sass/dart-sass/releases/download/${vDART}/dart-sass-${vDART}-linux-x64.tar.gz
    - tar -xf /tmp/dart.tar.gz -C /tmp && cp -r /tmp/dart-sass/ /usr/local/bin && rm -rf /tmp/dart*
    - export PATH=/usr/local/bin/dart-sass:$PATH
    # Hugo
    - curl --output /tmp/hugo.deb -LJ https://github.com/gohugoio/hugo/releases/download/v${vHUGO}/hugo_extended_${vHUGO}_linux-amd64.deb
    - apt-get install -y /tmp/hugo.deb && rm /tmp/hugo.deb
    # Node.js dependencies
    - |
      if [[ -f package-lock.json || -f npm-shrinkwrap.json ]] ; then
        npm ci  || true
      else
        npm i || true
      fi
    # Hugo fails unexpectedly if the theme folder does not exist.
    - mkdir -p themes/fohuw
    - clog Check build
    # Build
    - hugo mod get && hugo --gc --minify
    # Compress
    - find public -type f -regex '.*\.\(css\|html\|js\|txt\|xml\)$' -exec gzip -f -k {} \;
    - find public -type f -regex '.*\.\(css\|html\|js\|txt\|xml\)$' -exec brotli -f -k {} \;
    # Get website version
    - source clogrc/_cfg.sh && echo "$PROJECT website version $vCODE in artifacts"
    # clog has a problem running in alpine at the moment, dso do checks here
    - curl https://mrmxf.com/get/clog | bash
    - clog Check docker
  artifacts:
    paths:
      - public

# --- deploy ------------------------------------------------------------------
deploy:
  stage: deploy
  image: docker:$vDOCKER_IMAGE
  services:
    - docker:$vDOCKER_IMAGE-dind
  before_script:
    - apk update && apk upgrade && apk add curl
    - echo "$MRX_DOCKER_PWD" | docker login -u "$MRX_DOCKER_USR" --password-stdin
    - docker info
  script:
    #create env from upstream dependencies
    - vCODE="$(cat data/releases.yaml|grep version|head -1|grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"
    - PROJECT=www-metarex-media
    - echo "Deploying website version ($vCODE) from branch ($BRANCH)"

    - TARGETamd="$MRX_DOCKER_NS/$PROJECT-amd:$vCODE"
    - TARGETarm="$MRX_DOCKER_NS/$PROJECT-arm:$vCODE"

    #- docker buildx build -t $TARGET --push --platform linux/amd64,linux/arm64,linux/arm/v7 .
    - echo "Build & push to $TARGETamd"
    - docker buildx build -t "$TARGETamd" --push --platform linux/amd64 .
    - docker buildx imagetools inspect "$TARGETamd"

    - echo "Build & push to $TARGETarm"
    - docker buildx build -t "$TARGETarm" --push --platform linux/arm64 .
    - docker buildx imagetools inspect "$TARGETarm"

    # - curl https://mrmxf.com/get/clog | bash
    # - clog Check deploy
# --- hook ------------------------------------------------------------------
hook:
  stage: deploy
  needs: [deploy]
  script:
    - vCODE="$(cat data/releases.yaml|grep version|head -1|grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"
    - PROJECT=www-metarex-media
    - echo "Hook website version ($vCODE) from branch ($BRANCH)"
    - echo "fire the CI/CD hook to the website signalling no errors"
    - curl https://staging.metarex.media/a/hook/cicd/gitlab-deploy/$PROJECT/$vCODE
